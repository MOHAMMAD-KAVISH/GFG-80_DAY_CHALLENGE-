long long mergeAndCount(vector<int>& arr, int left, int mid, int right) {
    vector<int> temp(right - left + 1);
    int i = left, j = mid + 1, k = 0;
    long long invCount = 0;

    // Merge the two halves while counting inversions
    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            temp[k++] = arr[j++];
            invCount += (mid - i + 1); // Count inversions
        }
    }

    // Copy remaining elements from the left half
    while (i <= mid) {
        temp[k++] = arr[i++];
    }

    // Copy remaining elements from the right half
    while (j <= right) {
        temp[k++] = arr[j++];
    }

    // Copy merged elements back to original array
    for (int p = 0; p < temp.size(); ++p) {
        arr[left + p] = temp[p];
    }

    return invCount;
}

// Recursive function to perform merge sort and count inversions
long long mergeSortAndCount(vector<int>& arr, int left, int right) {
    long long invCount = 0;
    if (left < right) {
        int mid = left + (right - left) / 2;

        // Recursively divide and count inversions in left and right halves
        invCount += mergeSortAndCount(arr, left, mid);
        invCount += mergeSortAndCount(arr, mid + 1, right);

        // Count inversions during merge step
        invCount += mergeAndCount(arr, left, mid, right);
    }
    return invCount;
}

    int inversionCount(vector<int> &arr) {
        // Your Code Here
        return mergeSortAndCount(arr, 0, arr.size() - 1);
    }
