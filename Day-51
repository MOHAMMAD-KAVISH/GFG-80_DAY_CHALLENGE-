#include <iostream>
#include <vector>
using namespace std;

int countTriplets(vector<int>& arr, int target) {
    int n = arr.size();
    int count = 0;

    // Iterate over the first element of the triplet
    for (int i = 0; i < n - 2; ++i) {
        int remaining_target = target - arr[i];
        int left = i + 1, right = n - 1;

        // Use two-pointer technique to find pairs
        while (left < right) {
            int sum = arr[left] + arr[right];
            if (sum == remaining_target) {
                // If arr[left] and arr[right] are the same value
                if (arr[left] == arr[right]) {
                    int num_elements = right - left + 1;
                    count += (num_elements * (num_elements - 1)) / 2; // nC2 combinations
                    break;
                }

                // Count duplicates on the left
                int l_count = 1, r_count = 1;
                while (left + 1 < right && arr[left] == arr[left + 1]) {
                    l_count++;
                    left++;
                }

                // Count duplicates on the right
                while (right - 1 > left && arr[right] == arr[right - 1]) {
                    r_count++;
                    right--;
                }

                // Add all combinations of duplicates
                count += l_count * r_count;

                // Move both pointers inward
                left++;
                right--;
            } else if (sum < remaining_target) {
                left++;
            } else {
                right--;
            }
        }
    }

    return count;
}

int main() {
    vector<int> arr = {1, 1, 1, 1, 1, 1, 3};
    int target = 3;
    cout << "Output: " << countTriplets(arr, target) << endl;

    return 0;
}
