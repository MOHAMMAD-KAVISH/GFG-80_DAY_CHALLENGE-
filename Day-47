#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

// Function to find the longest consecutive subsequence
int longestConsecutiveSubsequence(vector<int>& arr) {
    unordered_set<int> numSet(arr.begin(), arr.end()); // Store all elements in a set
    int longest = 0;

    for (int num : arr) {
        // Check if it is the start of a sequence
        if (numSet.find(num - 1) == numSet.end()) {
            int currentNum = num;
            int currentStreak = 1;

            // Count consecutive numbers
            while (numSet.find(currentNum + 1) != numSet.end()) {
                currentNum++;
                currentStreak++;
            }

            // Update the longest streak
            longest = max(longest, currentStreak);
        }
    }

    return longest;
}

int main() {
    // Example 1
    vector<int> arr1 = {2, 6, 1, 9, 4, 5, 3};
    cout << "Output: " << longestConsecutiveSubsequence(arr1) << endl; // Output: 6

    // Example 2
    vector<int> arr2 = {1, 9, 3, 10, 4, 20, 2};
    cout << "Output: " << longestConsecutiveSubsequence(arr2) << endl; // Output: 4

    // Example 3
    vector<int> arr3 = {15, 13, 12, 14, 11, 10, 9};
    cout << "Output: " << longestConsecutiveSubsequence(arr3) << endl; // Output: 7

    // Example 4
    vector<int> arr4 = {8, 2, 3, 6, 7, 5, 4};
    cout << "Output: " << longestConsecutiveSubsequence(arr4) << endl; // Output: 6

    // Example 5
    vector<int> arr5 = {100, 4, 200, 1, 3, 2};
    cout << "Output: " << longestConsecutiveSubsequence(arr5) << endl; // Output: 4

    // Example 6
    vector<int> arr6 = {1};
    cout << "Output: " << longestConsecutiveSubsequence(arr6) << endl; // Output: 1

    return 0;
}
