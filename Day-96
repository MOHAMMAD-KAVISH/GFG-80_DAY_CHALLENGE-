#include <bits/stdc++.h>
using namespace std;

vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
    priority_queue<pair<int, vector<int>>> maxHeap;  // Max heap to store the farthest k elements

    for (auto &point : points) {
        int x = point[0], y = point[1];
        int dist = x * x + y * y;  // Squared Euclidean distance
        
        maxHeap.push({dist, point});  // Insert into max heap
        
        if (maxHeap.size() > k)  // Keep only k closest elements
            maxHeap.pop();
    }

    vector<vector<int>> result;
    while (!maxHeap.empty()) {
        result.push_back(maxHeap.top().second);
        maxHeap.pop();
    }
    
    return result;
}

int main() {
    vector<vector<int>> points1 = {{1, 3}, {-2, 2}, {5, 8}, {0, 1}};
    int k1 = 2;
    vector<vector<int>> result1 = kClosest(points1, k1);
    
    vector<vector<int>> points2 = {{2, 4}, {-1, -1}, {0, 0}};
    int k2 = 1;
    vector<vector<int>> result2 = kClosest(points2, k2);
    
    cout << "Test Case 1: ";
    for (auto &p : result1) cout << "[" << p[0] << ", " << p[1] << "] ";
    cout << endl;

    cout << "Test Case 2: ";
    for (auto &p : result2) cout << "[" << p[0] << ", " << p[1] << "] ";
    cout << endl;

    return 0;
}
