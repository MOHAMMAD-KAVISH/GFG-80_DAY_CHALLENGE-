#include <bits/stdc++.h>
using namespace std;

// Definition for a Binary Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};

class Solution {
public:
    // Function to serialize a tree and return a list containing nodes of the tree.
    vector<int> serialize(Node* root) {
        vector<int> result;
        if (!root) return result;

        queue<Node*> q;
        q.push(root);

        while (!q.empty()) {
            Node* node = q.front();
            q.pop();

            if (node) {
                result.push_back(node->data);
                q.push(node->left);
                q.push(node->right);
            } else {
                result.push_back(-1); // Marker for NULL
            }
        }
        return result;
    }

    // Function to deserialize a list and construct the tree.
    Node* deSerialize(vector<int>& arr) {
        if (arr.empty()) return NULL;

        queue<Node*> q;
        Node* root = new Node(arr[0]);
        q.push(root);

        int i = 1;
        while (!q.empty() && i < arr.size()) {
            Node* parent = q.front();
            q.pop();

            // Left child
            if (arr[i] != -1) {
                parent->left = new Node(arr[i]);
                q.push(parent->left);
            }
            i++;

            // Right child
            if (i < arr.size() && arr[i] != -1) {
                parent->right = new Node(arr[i]);
                q.push(parent->right);
            }
            i++;
        }
        return root;
    }
};

// Utility function to print level order traversal
void printLevelOrder(Node* root) {
    if (!root) return;
    
    queue<Node*> q;
    q.push(root);
    while (!q.empty()) {
        Node* node = q.front();
        q.pop();

        if (node) {
            cout << node->data << " ";
            q.push(node->left);
            q.push(node->right);
        } else {
            cout << "NULL ";
        }
    }
    cout << endl;
}

// Driver Code
int main() {
    Solution sol;

    // Construct a sample tree
    Node* root = new Node(1);
    root->left = new Node(2);
    root->right = new Node(3);
    root->right->left = new Node(4);
    root->right->right = new Node(5);

    // Serialize the tree
    vector<int> serializedTree = sol.serialize(root);
    cout << "Serialized Tree: ";
    for (int val : serializedTree) cout << val << " ";
    cout << endl;

    // Deserialize the tree
    Node* newRoot = sol.deSerialize(serializedTree);
    cout << "Deserialized Tree (Level Order): ";
    printLevelOrder(newRoot);

    return 0;
}
