#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Function to build the Longest Prefix Suffix (LPS) array
vector<int> buildLPS(const string& pat) {
    int m = pat.size();
    vector<int> lps(m, 0);
    int len = 0; // length of the previous longest prefix suffix
    int i = 1;

    while (i < m) {
        if (pat[i] == pat[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1]; // move to the previous LPS
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}

// Function to find all occurrences of pat in txt
vector<int> findPattern(const string& txt, const string& pat) {
    vector<int> result;
    int n = txt.size();
    int m = pat.size();

    vector<int> lps = buildLPS(pat);

    int i = 0; // index for txt
    int j = 0; // index for pat

    while (i < n) {
        if (txt[i] == pat[j]) {
            i++;
            j++;
        }
        if (j == m) { // Found a match
            result.push_back(i - j);
            j = lps[j - 1]; // Continue searching
        } else if (i < n && txt[i] != pat[j]) {
            if (j != 0) {
                j = lps[j - 1]; // Move to the previous LPS
            } else {
                i++;
            }
        }
    }

    return result;
}

int main() {
    string txt = "aabaacaadaabaaba";
    string pat = "aaba";

    vector<int> indices = findPattern(txt, pat);

    if (indices.empty()) {
        cout << "[]" << endl;
    } else {
        cout << "[";
        for (size_t i = 0; i < indices.size(); i++) {
            cout << indices[i];
            if (i != indices.size() - 1) {
                cout << ", ";
            }
        }
        cout << "]" << endl;
    }

    return 0;
}
