#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int n, m;
    vector<vector<int>> dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; // Right, Left, Down, Up

    bool dfs(vector<vector<char>>& mat, int i, int j, int start, string& word) {
        if (start == word.size()) return true;  // Fixed condition
        
        // Check boundaries and character match
        if (i < 0 || i >= n || j < 0 || j >= m || mat[i][j] != word[start]) 
            return false;

        // Mark as visited temporarily
        char temp = mat[i][j];
        mat[i][j] = '#';

        // Explore all 4 directions
        for (auto& d : dir) {
            int newi = i + d[0], newj = j + d[1];
            if (dfs(mat, newi, newj, start + 1, word)) 
                return true;
        }

        // Backtrack
        mat[i][j] = temp;
        return false;
    }

    bool isWordExist(vector<vector<char>>& mat, string& word) {
        n = mat.size(), m = mat[0].size();

        // Try to start DFS from any matching first letter
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (mat[i][j] == word[0] && dfs(mat, i, j, 0, word)) {
                    return true;
                }
            }
        }
        return false;
    }
};

// Driver Code
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> mat(n, vector<char>(m, '*'));
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                cin >> mat[i][j];

        string word;
        cin >> word;
        Solution obj;
        bool ans = obj.isWordExist(mat, word);
        cout << (ans ? "true" : "false") << "\n";
        cout << "~\n";
    }
    return 0;
}
