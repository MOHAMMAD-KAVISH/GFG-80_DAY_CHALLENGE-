class Solution {
  public:
    int longestStringChain(vector<string>& words) {
        // Code here
        unordered_map<string, int> dp;
        sort(words.begin(), words.end(), [](const string &a, const string &b) {
            return a.size() < b.size();
        });

        int maxLen = 1;
        for (string word : words) {
            dp[word] = 1;
            for (int i = 0; i < word.size(); i++) {
                string pred = word.substr(0, i) + word.substr(i + 1);
                if (dp.find(pred) != dp.end()) {
                    dp[word] = max(dp[word], dp[pred] + 1);
                }
            }
            maxLen = max(maxLen, dp[word]);
        }
        return maxLen;
    }
};
