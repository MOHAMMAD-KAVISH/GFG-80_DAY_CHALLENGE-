bool isPossible(vector<int>& arr, int k, int maxPages) {
    int students = 1; // Start with one student
    int currentSum = 0;

    for (int pages : arr) {
        if (pages > maxPages) {
            return false; // A single book has more pages than maxPages
        }

        if (currentSum + pages > maxPages) {
            // Assign books to a new student
            students++;
            currentSum = pages;

            if (students > k) {
                return false; // More students needed than allowed
            }
        } else {
            currentSum += pages;
        }
    }

    return true;
}
    int findPages(vector<int> &arr, int k) {
        // code here
    int n = arr.size();
    if (k > n) {
        return -1; // Not enough books for each student
    }

    int low = *max_element(arr.begin(), arr.end());
    int high = accumulate(arr.begin(), arr.end(), 0);
    int result = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (isPossible(arr, k, mid)) {
            result = mid; // Store the result and try for a smaller max
            high = mid - 1;
        } else {
            low = mid + 1; // Try for a larger max
        }
    }

    return result;
    }
