vector<vector<int>> mergeOverlap(vector<vector<int>>& intervals) {
        // Code here
    sort(intervals.begin(), intervals.end());

    vector<vector<int>> merged;
    for (const auto& interval : intervals) {
        // If merged is empty or there is no overlap, add the interval
        if (merged.empty() || merged.back()[1] < interval[0]) {
            merged.push_back(interval);
        } else {
            // Otherwise, merge the intervals by updating the end time
            merged.back()[1] = max(merged.back()[1], interval[1]);
        }
    }

    return merged;
